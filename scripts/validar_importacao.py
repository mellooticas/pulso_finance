#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script 8/8: Validar Importa√ß√£o
Conecta ao Supabase e executa queries de valida√ß√£o
Gera: data/seeds/relatorio_validacao.txt

EXECUTAR SOMENTE AP√ìS importar TODOS os CSVs no Supabase!
"""

from pathlib import Path
from supabase import create_client, Client
import os
from dotenv import load_dotenv
from datetime import datetime

# Configura√ß√£o
ARQUIVO_SAIDA = Path("data/seeds/relatorio_validacao.txt")

# Carregar vari√°veis de ambiente
load_dotenv()

def conectar_supabase() -> Client:
    """Conecta ao Supabase usando vari√°veis de ambiente"""
    url = os.getenv("NEXT_PUBLIC_SUPABASE_URL")
    key = os.getenv("NEXT_PUBLIC_SUPABASE_ANON_KEY")
    
    if not url or not key:
        raise ValueError("‚ùå Vari√°veis NEXT_PUBLIC_SUPABASE_URL e NEXT_PUBLIC_SUPABASE_ANON_KEY n√£o encontradas no .env")
    
    return create_client(url, key)

def validar_contagens(supabase: Client, relatorio):
    """Valida contagem de registros em cada tabela"""
    print("\nüìä Validando contagens...")
    relatorio.append("=" * 60)
    relatorio.append("VALIDA√á√ÉO DE CONTAGENS")
    relatorio.append("=" * 60)
    
    tabelas = ['lojas', 'centros_custos', 'plano_contas', 'contas_financeiras', 'fornecedores', 'lancamentos', 'parcelas']
    
    for tabela in tabelas:
        try:
            response = supabase.table(tabela).select('id', count='exact').execute()
            count = response.count
            print(f"   ‚úÖ {tabela}: {count:,} registros")
            relatorio.append(f"{tabela}: {count:,} registros")
        except Exception as e:
            print(f"   ‚ùå {tabela}: Erro - {e}")
            relatorio.append(f"{tabela}: ERRO - {e}")
    
    relatorio.append("")

def validar_integridade_referencial(supabase: Client, relatorio):
    """Valida integridade referencial (foreign keys)"""
    print("\nüîó Validando integridade referencial...")
    relatorio.append("=" * 60)
    relatorio.append("INTEGRIDADE REFERENCIAL")
    relatorio.append("=" * 60)
    
    # Lan√ßamentos com loja inv√°lida
    try:
        response = supabase.rpc('validar_lancamentos_loja_invalida').execute()
        invalidos = len(response.data) if response.data else 0
        status = "‚úÖ" if invalidos == 0 else "‚ùå"
        print(f"   {status} Lan√ßamentos com loja inv√°lida: {invalidos}")
        relatorio.append(f"Lan√ßamentos com loja inv√°lida: {invalidos}")
    except:
        print("   ‚ö†Ô∏è  RPC validar_lancamentos_loja_invalida n√£o encontrado (criar manualmente)")
        relatorio.append("Lan√ßamentos com loja inv√°lida: [RPC n√£o encontrado]")
    
    # Parcelas √≥rf√£s (sem lan√ßamento)
    try:
        response = supabase.rpc('validar_parcelas_orfas').execute()
        orfas = len(response.data) if response.data else 0
        status = "‚úÖ" if orfas == 0 else "‚ùå"
        print(f"   {status} Parcelas √≥rf√£s: {orfas}")
        relatorio.append(f"Parcelas √≥rf√£s: {orfas}")
    except:
        print("   ‚ö†Ô∏è  RPC validar_parcelas_orfas n√£o encontrado (criar manualmente)")
        relatorio.append("Parcelas √≥rf√£s: [RPC n√£o encontrado]")
    
    relatorio.append("")

def validar_valores(supabase: Client, relatorio):
    """Valida somas e valores financeiros"""
    print("\nüí∞ Validando valores financeiros...")
    relatorio.append("=" * 60)
    relatorio.append("VALIDA√á√ÉO DE VALORES")
    relatorio.append("=" * 60)
    
    # Soma total de lan√ßamentos
    try:
        response = supabase.rpc('soma_total_lancamentos').execute()
        total = response.data[0]['total'] if response.data else 0
        print(f"   ‚úÖ Soma total lan√ßamentos: R$ {total:,.2f}")
        relatorio.append(f"Soma total lan√ßamentos: R$ {total:,.2f}")
    except Exception as e:
        print(f"   ‚ö†Ô∏è  Erro ao calcular soma: {e}")
        relatorio.append(f"Soma total lan√ßamentos: [Erro - {e}]")
    
    # Soma total de parcelas
    try:
        response = supabase.rpc('soma_total_parcelas').execute()
        total = response.data[0]['total'] if response.data else 0
        print(f"   ‚úÖ Soma total parcelas: R$ {total:,.2f}")
        relatorio.append(f"Soma total parcelas: R$ {total:,.2f}")
    except Exception as e:
        print(f"   ‚ö†Ô∏è  Erro ao calcular soma: {e}")
        relatorio.append(f"Soma total parcelas: [Erro - {e}]")
    
    relatorio.append("")

def validar_datas(supabase: Client, relatorio):
    """Valida datas (range, consist√™ncia)"""
    print("\nüìÖ Validando datas...")
    relatorio.append("=" * 60)
    relatorio.append("VALIDA√á√ÉO DE DATAS")
    relatorio.append("=" * 60)
    
    # Range de datas de lan√ßamentos
    try:
        response = supabase.rpc('range_datas_lancamentos').execute()
        if response.data:
            data_min = response.data[0].get('data_min')
            data_max = response.data[0].get('data_max')
            print(f"   ‚úÖ Range lan√ßamentos: {data_min} a {data_max}")
            relatorio.append(f"Range lan√ßamentos: {data_min} a {data_max}")
    except Exception as e:
        print(f"   ‚ö†Ô∏è  Erro ao buscar range: {e}")
        relatorio.append(f"Range lan√ßamentos: [Erro - {e}]")
    
    # Range de datas de parcelas
    try:
        response = supabase.rpc('range_datas_parcelas').execute()
        if response.data:
            data_min = response.data[0].get('data_min')
            data_max = response.data[0].get('data_max')
            print(f"   ‚úÖ Range parcelas: {data_min} a {data_max}")
            relatorio.append(f"Range parcelas: {data_min} a {data_max}")
    except Exception as e:
        print(f"   ‚ö†Ô∏è  Erro ao buscar range: {e}")
        relatorio.append(f"Range parcelas: [Erro - {e}]")
    
    relatorio.append("")

def main():
    print("=" * 60)
    print("SCRIPT 8/8: VALIDAR IMPORTA√á√ÉO")
    print("=" * 60)
    
    # Criar diret√≥rio de seeds se n√£o existir
    ARQUIVO_SAIDA.parent.mkdir(parents=True, exist_ok=True)
    
    relatorio = []
    relatorio.append("=" * 60)
    relatorio.append("RELAT√ìRIO DE VALIDA√á√ÉO DE IMPORTA√á√ÉO")
    relatorio.append(f"Data: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    relatorio.append("=" * 60)
    relatorio.append("")
    
    try:
        # Conectar ao Supabase
        print("\nüîå Conectando ao Supabase...")
        supabase = conectar_supabase()
        print("   ‚úÖ Conectado com sucesso")
        
        # Executar valida√ß√µes
        validar_contagens(supabase, relatorio)
        validar_integridade_referencial(supabase, relatorio)
        validar_valores(supabase, relatorio)
        validar_datas(supabase, relatorio)
        
        # Salvar relat√≥rio
        print(f"\nüíæ Salvando {ARQUIVO_SAIDA}...")
        with open(ARQUIVO_SAIDA, 'w', encoding='utf-8') as f:
            f.write('\n'.join(relatorio))
        
        print(f"‚úÖ Relat√≥rio salvo com sucesso")
        
        print("\n" + "=" * 60)
        print("‚úÖ SCRIPT 8/8 CONCLU√çDO")
        print("=" * 60)
        print(f"\nüìÅ Relat√≥rio gerado: {ARQUIVO_SAIDA}")
        print("\nüéâ PROCESSO DE POVOAMENTO COMPLETO!")
        print("\nüìã Pr√≥ximos passos:")
        print("   1. Revisar relat√≥rio de valida√ß√£o")
        print("   2. Corrigir inconsist√™ncias se houver")
        print("   3. Executar queries SQL adicionais conforme necess√°rio")
        print("   4. Configurar RLS policies no Supabase")
        print("   5. Testar frontend com dados reais")
        
    except Exception as e:
        print(f"\n‚ùå Erro: {e}")
        relatorio.append("")
        relatorio.append("=" * 60)
        relatorio.append(f"ERRO DURANTE VALIDA√á√ÉO: {e}")
        relatorio.append("=" * 60)
        
        with open(ARQUIVO_SAIDA, 'w', encoding='utf-8') as f:
            f.write('\n'.join(relatorio))
        
        return 1

if __name__ == "__main__":
    exit(main())
